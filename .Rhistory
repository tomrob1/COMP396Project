x <- series[[1]]
y <- series[[9]]
x <- rollz(x, 60)
y <- rollz(y, 60)
model <- lm(x~y)
hedge <- model$coefficients[2]
spread <- x - hedge * y
plot(spread, main="Spread regression with rolling z")
spread <- na.remove(spread)
adf.test(spread)
x <- na.remove(x)
y <- na.remove(y)
adf.test(x)
adf.test(y)
ratios <- series[[9]]/series[[1]]
plot(ratios, main="Part 1 Ratio")
adf.test(ratios)
ratios2 <- series2[[9]]/series[[1]]
plot(ratios2, main="Part 2 Ratio")
adf.test(ratios2)
zscore <- function(series)
return (series - mean(series))/sd(series)
zScore <- zscore(ratios)
source('framework/data.R')
library(ggplot2)
library(grid)
library(gridExtra)
library(tseries)
library(xts)
######################################################################################################################################
# data
######################################################################################################################################
dataList <- getData("PART1")
dataList2 <- getData("PART2")
series <- lapply(dataList[1:10], function(x) x$Close)
series2 <- lapply(dataList2[1:10], function(x) x$Close)
rollz <- function(x,window){
mean = rollapply(x, window, mean)
std = rollapply(x, window, sd)
z = (x - mean) / std
return (z)
}
x <- series[[1]]
y <- series[[9]]
x <- rollz(x, 60)
y <- rollz(y, 60)
model <- lm(x~y)
hedge <- model$coefficients[2]
spread <- x - hedge * y
plot(spread, main="Spread regression with rolling z")
spread <- na.remove(spread)
adf.test(spread)
x <- na.remove(x)
y <- na.remove(y)
adf.test(x)
adf.test(y)
ratios <- series[[9]]/series[[1]]
plot(ratios, main="Part 1 Ratio")
adf.test(ratios)
ratios2 <- series2[[9]]/series2[[1]]
plot(ratios2, main="Part 2 Ratio")
adf.test(ratios2)
zscore <- function(series)
return (series - mean(series))/sd(series)
zScore <- zscore(ratios)
View(zScore)
plot(zScore)
plot(zScore)
source('framework/data.R')
library(ggplot2)
library(grid)
library(gridExtra)
library(tseries)
library(xts)
######################################################################################################################################
# data
######################################################################################################################################
dataList <- getData("PART1")
dataList2 <- getData("PART2")
series <- lapply(dataList[1:10], function(x) x$Close)
series2 <- lapply(dataList2[1:10], function(x) x$Close)
rollz <- function(x,window){
mean = rollapply(x, window, mean)
std = rollapply(x, window, sd)
z = (x - mean) / std
return (z)
}
x <- series[[1]]
y <- series[[9]]
x <- rollz(x, 60)
y <- rollz(y, 60)
model <- lm(x~y)
hedge <- model$coefficients[2]
spread <- x - hedge * y
plot(spread, main="Spread regression with rolling z")
spread <- na.remove(spread)
adf.test(spread)
x <- na.remove(x)
y <- na.remove(y)
adf.test(x)
adf.test(y)
ratios <- series[[9]]/series[[1]]
plot(ratios, main="Part 1 Ratio")
adf.test(ratios)
ratios2 <- series2[[9]]/series2[[1]]
plot(ratios2, main="Part 2 Ratio")
adf.test(ratios2)
zscore <- function(series)
return (series - mean(series))/sd(series)
zScore <- zscore(ratios)
zScore2 <- zscore(ratios2)
plot(zScore)
plot(zScore2)
plot(zscore)
#Feature engineering
bigma <- rollmean(ratios,60) # 60 day ma
smallma <- rollmean(ratios, 5) # 5 day ma
sd <- rollapply(ratios, width = 60, FUN = sd, na.rm=TRUE) # 60 day sd
zscore <- (smallma - bigma)/sd
plot(zscore)
adf.test(zscore)
## Functions
zscore <- function(series)
adf.test(zscore)
adf.test(zscore)
plot(zscore)
adf.test(zscore)
source('framework/data.R')
library(ggplot2)
library(grid)
library(gridExtra)
library(tseries)
library(xts)
######################################################################################################################################
# data
######################################################################################################################################
dataList <- getData("PART1")
dataList2 <- getData("PART2")
series <- lapply(dataList[1:10], function(x) x$Close)
series2 <- lapply(dataList2[1:10], function(x) x$Close)
x <- series[[1]]
y <- series[[9]]
x <- rollz(x, 60)
y <- rollz(y, 60)
#Rolling zscore regression?
model <- lm(x~y)
hedge <- model$coefficients[2]
spread <- x - hedge * y
plot(spread, main="Spread regression with rolling z")
spread <- na.remove(spread)
adf.test(spread)
x <- na.remove(x)
y <- na.remove(y)
adf.test(x)
adf.test(y)
#Price ratio
ratios <- series[[9]]/series[[1]]
plot(ratios, main="Part 1 Ratio")
adf.test(ratios)
ratios2 <- series2[[9]]/series2[[1]]
plot(ratios2, main="Part 2 Ratio")
adf.test(ratios2)
zScore <- zscore(ratios)
zScore2 <- zscore(ratios2)
plot(zScore)
plot(zScore2)
#Feature engineering
bigma <- rollmean(ratios,60) # 60 day ma
smallma <- rollmean(ratios, 5) # 5 day ma
sd <- rollapply(ratios, width = 60, FUN = sd, na.rm=TRUE) # 60 day sd
zed <- (smallma - bigma)/sd
plot(zed)
adf.test(zed)
## Functions
zscore <- function(series)
return (series - mean(series))/sd(series)
rollz <- function(x,window){
mean = rollapply(x, window, mean)
std = rollapply(x, window, sd)
z = (x - mean) / std
return (z)
}
zed <- na.remove(zed)
adf.test(zed)
View(bigma)
View(bigma)
View(ratios)
View(ratios)
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
View(bigma)
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source('framework/data.R')
library(ggplot2)
library(grid)
library(gridExtra)
library(tseries)
library(xts)
######################################################################################################################################
# data
######################################################################################################################################
dataList <- getData("PART1")
dataList2 <- getData("PART2")
series <- lapply(dataList[1:10], function(x) x$Close)
series2 <- lapply(dataList2[1:10], function(x) x$Close)
x <- series[[1]]
y <- series[[9]]
x <- rollz(x, 60)
y <- rollz(y, 60)
#Rolling zscore regression?
model <- lm(x~y)
hedge <- model$coefficients[2]
spread <- x - hedge * y
plot(spread, main="Spread regression with rolling z")
spread <- na.remove(spread)
adf.test(spread)
x <- na.remove(x)
y <- na.remove(y)
adf.test(x)
adf.test(y)
#Price ratio
ratios <- series[[9]]/series[[1]]
plot(ratios, main="Part 1 Ratio")
adf.test(ratios)
ratios2 <- series2[[9]]/series2[[1]]
plot(ratios2, main="Part 2 Ratio")
adf.test(ratios2)
zScore <- zscore(ratios)
zScore2 <- zscore(ratios2)
plot(zScore)
plot(zScore2)
#Feature engineering
bigma <- rollmean(ratios,60) # 60 day ma
smallma <- rollmean(ratios, 5) # 5 day ma
sd <- rollapply(ratios, width = 60, FUN = sd, na.rm=TRUE) # 60 day sd
zed <- (smallma - bigma)/sd
plot(zed, "FEATURE ENG")
zed <- na.remove(zed)
adf.test(zed)
## Functions
zscore <- function(series)
return (series - mean(series))/sd(series)
rollz <- function(x,window){
mean = rollapply(x, window, mean)
std = rollapply(x, window, sd)
z = (x - mean) / std
return (z)
}
CLEAR
clear
clear()
source('framework/data.R')
library(ggplot2)
library(grid)
library(gridExtra)
library(tseries)
library(xts)
######################################################################################################################################
# data
######################################################################################################################################
dataList <- getData("PART1")
dataList2 <- getData("PART2")
series <- lapply(dataList[1:10], function(x) x$Close)
series2 <- lapply(dataList2[1:10], function(x) x$Close)
x <- series[[1]]
y <- series[[9]]
x <- rollz(x, 60)
y <- rollz(y, 60)
#Rolling zscore regression?
model <- lm(x~y)
hedge <- model$coefficients[2]
spread <- x - hedge * y
plot(spread, main="Spread regression with rolling z")
spread <- na.remove(spread)
adf.test(spread)
x <- na.remove(x)
y <- na.remove(y)
adf.test(x)
adf.test(y)
#Price ratio
ratios <- series[[9]]/series[[1]]
plot(ratios, main="Part 1 Ratio")
adf.test(ratios)
ratios2 <- series2[[9]]/series2[[1]]
plot(ratios2, main="Part 2 Ratio")
adf.test(ratios2)
zScore <- zscore(ratios)
zScore2 <- zscore(ratios2)
plot(zScore)
plot(zScore2)
#Feature engineering
bigma <- rollmean(ratios,60) # 60 day ma
smallma <- rollmean(ratios, 5) # 5 day ma
sd <- rollapply(ratios, width = 60, FUN = sd, na.rm=TRUE) # 60 day sd
zed <- (smallma - bigma)/sd
plot(zed, "FEATURE ENG")
zed <- na.remove(zed)
adf.test(zed)
## Functions
zscore <- function(series)
return (series - mean(series))/sd(series)
rollz <- function(x,window){
mean = rollapply(x, window, mean)
std = rollapply(x, window, sd)
z = (x - mean) / std
return (z)
}
source('framework/data.R')
library(ggplot2)
library(grid)
library(gridExtra)
library(tseries)
library(xts)
######################################################################################################################################
# data
######################################################################################################################################
dataList <- getData("PART1")
dataList2 <- getData("PART2")
series <- lapply(dataList[1:10], function(x) x$Close)
series2 <- lapply(dataList2[1:10], function(x) x$Close)
x <- series[[1]]
y <- series[[9]]
x <- rollz(x, 60)
y <- rollz(y, 60)
#Rolling zscore regression?
model <- lm(x~y)
hedge <- model$coefficients[2]
spread <- x - hedge * y
plot(spread, main="Spread regression with rolling z")
spread <- na.remove(spread)
adf.test(spread)
x <- na.remove(x)
y <- na.remove(y)
adf.test(x)
adf.test(y)
#Price ratio
ratios <- series[[9]]/series[[1]]
plot(ratios, main="Part 1 Ratio")
adf.test(ratios)
ratios2 <- series2[[9]]/series2[[1]]
plot(ratios2, main="Part 2 Ratio")
adf.test(ratios2)
zScore <- zscore(ratios)
zScore2 <- zscore(ratios2)
plot(zScore)
plot(zScore2)
#Feature engineering
bigma <- rollmean(ratios,60) # 60 day ma
smallma <- rollmean(ratios, 5) # 5 day ma
sd <- rollapply(ratios, width = 60, FUN = sd, na.rm=TRUE) # 60 day sd
zed <- (smallma - bigma)/sd
plot(zed, "FEATURE ENG")
zed <- na.remove(zed)
adf.test(zed)
## Functions
zscore <- function(series)
return (series - mean(series))/sd(series)
rollz <- function(x,window){
mean = rollapply(x, window, mean)
std = rollapply(x, window, sd)
z = (x - mean) / std
return (z)
}
clear()
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('strategies/fixed.R')
#################################################################
# DATA
#################################################################
dataList <- getData(directory="PART1")
#################################################################
# STRATEGY
#################################################################
strategyFile <-'strategies/fixed.R'
cat("Sourcing",strategyFile,"\n")
source(strategyFile) # load in getOrders
################################################################
# BACKTEST PARAMETERS
#numOfDays <- 200 # don't use all available days to start with!
#dataList  <- lapply(dataList, function(x) x[1:numOfDays])
#dataList  <- lapply(dataList, function(x) x[(numOfDays+1):nrow(dataList[[1]])])
sMult <- 0.20 # slippage multiplier
################################################################
# DO BACKTEST
################################################################
path <- paste0("images/")
################################################################
# STRATEGY PARAMETERS
params<- list(sizes=rep(1,10)) # buy and hold equal positions
numOfDays <- 500
dataList  <- lapply(dataList, function(x) x[(numOfDays+1):nrow(dataList[[1]])])
#Equal position sizes chart
backtestAndPlot(path=path,
filename="buy_and_hold_one_PART1",
main="Equal position sizes")
# bbands
#params<- list(lookback=10,sdParam=1.25,series=1:5,positionSizes=positionSizes) # bbands
# daily open difference chart
openDiffs <- lapply(dataList,function(x) diff(x$Open))
toPlot <- do.call(cbind,openDiffs)
colnames(toPlot) <- paste("Series",sprintf("%02d",1:10))
plot.zoo(toPlot,
main="Open on open simple differences",
cex.axis=1.2,
cex.main=2,
yax.flip=TRUE)
dev.copy(pdf,file.path(path,"opendiffs.pdf"))
dev.off()
#Absolute open Difference table
absOpenDiffs    <- lapply(openDiffs,abs)
avgAbsDiffs <- sapply(absOpenDiffs,mean,na.rm=TRUE)
print('Avg Abs Diffs', avgAbsDiffs)
opensOnFirstDay <- sapply(dataList,function(x) first(x)$Open)
print(opensOnFirstDay)
tab <- cbind(opensOnFirstDay,
avgAbsDiffs,
abs(avgAbsDiffs)/opensOnFirstDay)
colnames(tab) <- c("Open","Mean abs diff","Mean abs diff/Open")
print(tab)
#Pos sizes inverse to open chart
opens <- sapply(dataList,function(x) first(x)$Open)
print(opens)
largestOpen <- max(opens)
print(largestOpen)
positionSizes <- round(largestOpen/opens)
print(positionSizes)
params<- list(sizes=positionSizes) # inversely proportional to starting open
backtestAndPlot(path=path,
filename="inversely_prop_open",
main="Position sizes inversely proportional to Open")
# pos sizes inverse prop to avg abs diffs chart
largestAvgAbsDiffs <- max(avgAbsDiffs)
positionSizes <- round(largestAvgAbsDiffs/avgAbsDiffs)
params<- list(sizes=positionSizes) # inversely proportional to average abs diff
backtestAndPlot(path=path,
filename="inversely_prop_diffs",
main="Position sizes inversely proportional to Average Abs Diffs")
estCostToBuy <- sum(positionSizes * opens)
print("cost to buy")
print(estCostToBuy)
target <- 900000 # Try to spend this much
multiplier <- target / estCostToBuy
positionSizes <- round(multiplier * positionSizes)
print(positionSizes)
params<- list(sizes=positionSizes)
backtestAndPlot(path=path,
filename="spend_target",
main=paste0("Spending ï¿½900,000"))
estCostToBuy <- sum(positionSizes * opens)
print("cost to buy")
print(estCostToBuy)
target <- 900000 # Try to spend this much
multiplier <- target / estCostToBuy
positionSizes <- round(multiplier * positionSizes)
print(positionSizes)
source("main.R")
source("main.R")
warnings()
source("main.R")
source("main.R")
source("main.R")
source("main.R")
estCostToBuy <- sum(positionSizes * opens)
print("cost to buy")
print(estCostToBuy)
target <- 900000 # Try to spend this much
multiplier <- target / estCostToBuy
positionSizes <- round(multiplier * positionSizes)
print(positionSizes)
source("notes/cointegration_optimize.R")
source("main.R")
